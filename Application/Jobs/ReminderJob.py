import asyncio
from datetime import datetime
from Core.Interfaces.ILessonRepository import ILessonRepository
from Core.Interfaces.ITimeSlotRepository import ITimeSlotRepository
from Core.Interfaces.IReminderRepository import IReminderRepository
from Core.UseCases.Reminder.ScheduleRemindersUseCase import ScheduleRemindersUseCase
from Core.Entities.Reminder import Reminder

class ReminderJob:
    def __init__(
        self,
        lesson_repo: ILessonRepository,
        time_slot_repo: ITimeSlotRepository,
        reminder_repo: IReminderRepository
    ):
        self._lesson_repo = lesson_repo
        self._time_slot_repo = time_slot_repo
        self._reminder_repo = reminder_repo
        self._use_case = ScheduleRemindersUseCase(lesson_repo, time_slot_repo, reminder_repo)

    async def run(self):
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        reminders = await self._use_case.execute(hours_ahead=24)
        print(f"–°–æ–∑–¥–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(reminders)}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –µ—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏–ª–æ –∏—Ö –≤—Ä–µ–º—è
        now = datetime.now()
        pending_reminders = await self._reminder_repo.get_pending_reminders_async(now)

        if not pending_reminders:
            print("–ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
            return

        for reminder in pending_reminders:
            sent = await self._send_notification(reminder)
            if sent:
                await self._reminder_repo.mark_as_sent_async(reminder.self_id)
                print(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder.self_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

    async def _send_notification(self, reminder: Reminder) -> bool:
        # TODO: –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        print(f"üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç—É {reminder.student_id} (Reminder ID: {reminder.self_id})")
        return True
